#pragma once

#cmakedefine CMAKE_SOURCE_DIR "@CMAKE_SOURCE_DIR@"
#cmakedefine CMAKE_CURRENT_BINARY_DIR "@CMAKE_CURRENT_BINARY_DIR@"
#cmakedefine CMAKE_PROJECT_BINARY_DIR "@CMAKE_PROJECT_BINARY_DIR@"

#cmakedefine CMAKE_MAJOR_VERSION "@CMAKE_MAJOR_VERSIO@"
#cmakedefine CMAKE_MINOR_VERSION "@CMAKE_MINOR_VERSION@"
#cmakedefine CMAKE_PATCH_VERSION "@CMAKE_PATCH_VERSION@"

#include <iostream>
#include <stdexcept>
#include <string>

namespace AboveInfinity {

#define AI_ASSERT_EQUAL(x, y) {
if((x) != (y))
    throw std::runtime_error(std::string("Assertion failure in file ") + std::string(__FILE__) +
                             std::string("\nLine: ") + std::to_string(__LINE__) + std::string("\nFunction:") +
                             std::string(__PRETTY_FUNCTION__) + std::string("\nCaused by assertion failure:\n") +
                             std::to_string((x)) + std::string("!=") + std::to_string((y)));
} // namespace AboveInfinity

#define AI_ASSERT_NON_EQUAL(x, y) {
if((x) == (y))
    throw std::runtime_error(std::string("Assertion failure in file ") + std::string(__FILE__) +
                             std::string("\nLine: ") + std::to_string(__LINE__) + std::string("\nFunction:") +
                             std::string(__PRETTY_FUNCTION__) + std::string("\nCaused by assertion failure:\n") +
                             std::to_string((x)) + std::string("!=") + std::to_string((y)));
}

#define AI_ASSERT_THROW(condition) {
if(!(condition))
    throw std::runtime_error(std::string("Error occured in file ") + std::string(__FILE__) + std::string("\nLine: ") +
                             std::to_string(__LINE__) + std::string("\nFunction:") + std::string(__PRETTY_FUNCTION__));
}

#define AI_EXPECT_EXCEPTION(expression, exception) {
try {
    (expression);
} catch(exception& e) {
} catch(...) {
    throw std::runtime_error(std::string("Error occured in file ") + std::string(__FILE__) + std::string("\nLine: ") +
                             std::to_string(__LINE__) + std::string("\nFunction:") + std::string(__PRETTY_FUNCTION__));
}

#define AI_TEST_BEGIN(name) {
std::cout << "Started test \"" << name << "\"...\n";
}

#define AI_TEST_END(name) {
std::cout << "Finished executing test \"" << name << "\"\n";
}

} // namespace AboveInfinity
